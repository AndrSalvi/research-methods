#set_driver(driver) # restore browser connection (for development only)
for (i in seq_along(dates)) {
if (is_completed(dates[[i]])) next
submit(query, dates[[i]], date_format = "%d/%m/%Y") # please check if the default date format ("%m/%d/%Y") is currect
if (is_zero(dates[[i]])) next
ranges <- get_download_range(size = 150) # download 500 items each time
for (j in seq_along(ranges)) {
download(dates[[i]], ranges[[j]], tail(unlist(ranges), 1))
}
}
require('Nexis')
set_directory("/Users/stefan/GitHub/phd-thesis/analysis/scraping/raw_data_sun")
url_login <- 'https://www-nexis-com.elib.tcd.ie/search/flap.do?flapID=home&random=0.6865466661296332'
open_browser(url_login) # a new browser window will open
query <- "promise OR pledge OR promises OR pledges OR promised OR pledged OR manifesto OR manifestos OR manifestoes AND Labour OR Conservatives OR Tories OR Conservative Party OR Liberal Democrats OR Liberal Democratic Party OR UKIP OR SNP OR Green Party OR Plaid Cymru OR Scottish National Party OR Democratic Unionist Party OR DUP"
from <- '2012-01-01'
to <- '2017-10-05'
size <- 1
unit <- 'month'
check_login()
dates <- get_date_range(from, to, size, unit)
head(dates, 3)
#set_driver(driver) # restore browser connection (for development only)
for (i in seq_along(dates)) {
if (is_completed(dates[[i]])) next
submit(query, dates[[i]], date_format = "%d/%m/%Y") # please check if the default date format ("%m/%d/%Y") is currect
if (is_zero(dates[[i]])) next
ranges <- get_download_range(size = 150) # download 500 items each time
for (j in seq_along(ranges)) {
download(dates[[i]], ranges[[j]], tail(unlist(ranges), 1))
}
}
require('Nexis')
set_directory("/Users/stefan/GitHub/phd-thesis/analysis/scraping/raw_data_taz")
url_login <- 'https://www-nexis-com.elib.tcd.ie/search/flap.do?flapID=home&random=0.6865466661296332'
open_browser(url_login) # a new browser window will open
query <- "Wahlversprechen OR Versprechen OR versprochen OR verspricht OR Wahlprogramm OR Manifesto AND SPD OR Sozialdemokraten OR Sozialdemokratische Partei Deutschlands  OR CDU OR Christlich Demokratische Union OR CSU OR Christlich Soziale Union OR FDP OR Freie Demokratische Partei OR Die Grünen OR Grüne OR Bündnis 90 OR Piraten OR Die Linke OR Linkspartei OR PDS OR WASG OR Alternative für Deutschland OR AfD"
from <- '1994-01-01'
to <- '2017-10-19'
size <- 1
unit <- 'month'
to <- '2017-10-22'
size <- 1
unit <- 'month'
check_login()
dates <- get_date_range(from, to, size, unit)
head(dates, 3)
#set_driver(driver) # restore browser connection (for development only)
for (i in seq_along(dates)) {
if (is_completed(dates[[i]])) next
submit(query, dates[[i]], date_format = "%d/%m/%Y") # please check if the default date format ("%m/%d/%Y") is currect
if (is_zero(dates[[i]])) next
ranges <- get_download_range(size = 150) # download 500 items each time
for (j in seq_along(ranges)) {
download(dates[[i]], ranges[[j]], tail(unlist(ranges), 1))
}
}
require('Nexis')
set_directory("/Users/stefan/GitHub/phd-thesis/analysis/scraping/raw_data_taz")
set_directory("/Users/stefan/GitHub/phd-thesis/analysis/scraping/raw_data_taz")
url_login <- 'https://www-nexis-com.elib.tcd.ie/search/flap.do?flapID=home&random=0.6865466661296332'
open_browser(url_login) # a new browser window will open
query <- "Wahlversprechen OR Versprechen OR versprochen OR verspricht OR Wahlprogramm OR Manifesto AND SPD OR Sozialdemokraten OR Sozialdemokratische Partei Deutschlands  OR CDU OR Christlich Demokratische Union OR CSU OR Christlich Soziale Union OR FDP OR Freie Demokratische Partei OR Die Grünen OR Grüne OR Bündnis 90 OR Piraten OR Die Linke OR Linkspartei OR PDS OR WASG OR Alternative für Deutschland OR AfD"
from <- '1994-01-01'
to <- '2017-10-22'
size <- 1
unit <- 'month'
check_login()
dates <- get_date_range(from, to, size, unit)
head(dates, 3)
#set_driver(driver) # restore browser connection (for development only)
for (i in seq_along(dates)) {
if (is_completed(dates[[i]])) next
submit(query, dates[[i]], date_format = "%d/%m/%Y") # please check if the default date format ("%m/%d/%Y") is currect
if (is_zero(dates[[i]])) next
ranges <- get_download_range(size = 150) # download 500 items each time
for (j in seq_along(ranges)) {
download(dates[[i]], ranges[[j]], tail(unlist(ranges), 1))
}
}
dta <- read.csv("/Users/stefan/Desktop/prices_dublin.csv") %>%
mutate(price = round(price, 0))
heights <- data.frame(
height = rnorm(1000000, 170, 1)
)
library(tidyverse)
dta <- read.csv("/Users/stefan/Desktop/prices_dublin.csv") %>%
mutate(price = round(price, 0))
heights <- data.frame(
height = rnorm(1000000, 170, 1)
)
set.seed(1)
south <- data.frame(
price = rnorm(1000, 600, 100),
area = "South Dublin")
north <- data.frame(
price = rnorm(1000, 550, 100),
area = "North Dublin")
dta <- bind_rows(north, south)
haven::write_sav(dta, file = "dublin_rent_simulated.sav")
library(haven)
write_sav
?write_sav
haven::write_sav(dta, "dublin_rent_simulated.sav")
haven::write_sav(dta, "data/mt_03/dublin_rent_simulated.sav")
south <- data.frame(
price = rnorm(1000, 600, 100),
area = 2)
north <- data.frame(
price = rnorm(1000, 550, 100),
area = 1)
dta <- bind_rows(north, south)
dta <- bind_rows(north, south) %>%
mutate(price = round(price))
haven::write_sav(dta, "data/mt_03/dublin_rent_simulated.sav")
south <- data.frame(
price = rnorm(1000, 600, 100),
area = 2)
north <- data.frame(
price = rnorm(1000, 550, 100),
area = 1)
dta <- bind_rows(north, south) %>%
mutate(price = round(price))
rio::export(dta, "data/mt_03/dublin_rent_simulated.xlsx")
dta <- bind_rows(north, south) %>%
mutate(price = round(price))
rio::export(dta, "data/mt_03/dublin_rent_simulated.xlsx")
dta
library(tidyverse)
set.seed(1)
south <- data.frame(
price = rnorm(1000, 600, 100),
area = 2)
north <- data.frame(
price = rnorm(1000, 550, 100),
area = 1)
dta <- bind_rows(north, south) %>%
mutate(price = round(price))
rio::export(dta, "data/mt_03/dublin_rent_simulated.xlsx")
rio::export(dta, "data/mt_03/dublin_rent_simulated.xlsx")
dta <- bind_rows(north, south) %>%
mutate(price = round(price))
dta
rio::export(dta, "data/mt_03/dublin_rent_simulated.xlsx")
write.csv(dta, "data/mt_03/dublin_rent_simulated.csv",
fileEncoding = "utf-8")
write.csv(dta, "data/mt_03/dublin_rent_simulated.csv",
fileEncoding = "utf-8",
row.names = FALSE)
south <- data.frame(
price = rnorm(1000, 600, 100),
area = 2)
north <- data.frame(
price = rnorm(1000, 550, 100),
area = 1)
dta <- bind_rows(north, south) %>%
mutate(price = round(price))
dta %>%
group_by(area) %>%
summarise(mean = mean(price))
dta %>%
group_by(area) %>%
summarise(mean = mean(price),
sd = sd(price))
551 - 601 / sqrt(103^2/1000) + sqrt(103^2/1000)
t.test(dta$price ~ dta$area)
(551 - 601) / sqrt(103^2/1000) + sqrt(103^2/1000)
dta %>%
group_by(area) %>%
summarise(mean = mean(price),
sd = sd(price))
(551.675 - 601.528) / sqrt(103.8666^2/1000) + sqrt(103.1129^2/1000)
?summarise
options(digits = 6)
dta %>%
group_by(area) %>%
summarise(mean = mean(price),
sd = sd(price))
options(digits = 7)
dta %>%
group_by(area) %>%
summarise(mean = mean(price),
sd = sd(price))
(551.675 - 601.528) / sqrt(103.8666^2/999) + sqrt(103.1129^2/999)
t.test(dta$price ~ dta$area)
(551.675 - 601.528) / sqrt(103.8666^2/1000) + sqrt(103.1129^2/1000)
dta %>%
group_by(area) %>%
summarise(mean = round(mean(price), 7),
sd = sd(price))
dta %>%
group_by(area) %>%
summarise(mean = mean(price),
sd = sd(price))
(551.675 - 601.528) / sqrt(103.8666^2/1000) + sqrt(103.1129^2/1000)
t.test(dta$price ~ dta$area)
set.seed(1)
south <- data.frame(
price = rnorm(1000, 600, 100),
area = 2)
north <- data.frame(
price = rnorm(1000, 550, 100),
area = 1)
dta <- bind_rows(north, south) %>%
mutate(price = round(price))
south <- data.frame(
price = rnorm(1000, 600, 100),
area = 2)
north <- data.frame(
price = rnorm(1000, 550, 100),
area = 1)
dta <- bind_rows(north, south) %>%
mutate(price = round(price))
haven::write_sav(dta, "data/mt_03_dublin_rent_simulated.sav")
dta <- bind_rows(north, south) %>%
mutate(price = round(price))
library(tidyverse)
set.seed(1)
south <- data.frame(
price = rnorm(1000, 600, 100),
area = 2)
north <- data.frame(
price = rnorm(1000, 550, 100),
area = 1)
dta <- bind_rows(north, south) %>%
mutate(price = round(price))
haven::write_sav(dta, "data/mt_03_dublin_rent_simulated.sav")
haven::write_sav(dta, "data/mt_03/dublin_rent_simulated.sav")
dta <- read.csv("/Users/stefan/Downloads/2014_CHES_dataset_means.csv")
library(tidyverse)
ggplot(dta, aes(x = lrgen, y = eu_position))
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_smooth()
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(aes(fill = country)) +
geom_smooth()
names(dta)
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(aes(fill = cname)) +
geom_smooth()
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(aes(colour = cname)) +
geom_smooth()
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_smooth() +
facet_wrap(~cname)
summary(dta$eu_position)
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point() +
facet_wrap(~cname)
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point() +
facet_wrap(~cname)
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_smooth()
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(alpha = 0.8) +
geom_smooth()
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(alpha = 0.8) +
geom_smooth() +
theme_bw()
plot_lrgen <- ggplot(dta, aes(x = lrgen))
plot_lrgen <- ggplot(dta, aes(x = lrgen)) +
geom_histogram()
plot_lrgen
plot_lrgen <- ggplot(dta, aes(x = lrgen)) +
geom_histogram(colour = "black")
ggplot(dta, aes(x = lrgen)) +
geom_histogram(colour = "black")
set_theme(theme_bw())
theme_set(theme_bw())
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(alpha = 0.8) +
geom_smooth()
library(tidyverse)
theme_set(theme_bw())
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(alpha = 0.8) +
geom_smooth()
ggplot(dta, aes(x = lrgen)) +
geom_histogram(colour = "black")
ggplot(dta, aes(x = lrgen)) +
geom_denseity(colour = "black")
ggplot(dta, aes(x = lrgen)) +
geom_density(colour = "black")
ggplot(dta, aes(x = lrgen)) +
geom_dotplot(colour = "black")
dta %>% filter(cname = "ire")
dta %>% filter(cname == "ire")
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen))
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen)) +
geom_point()
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen, y = eu_position)) +
geom_point()
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_text(aes(label = party_name))
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_text(aes(label = party_name), vjust = 0.5)
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_text(aes(label = party_name), vjust = 0.5, hjust = 5)
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_text(aes(label = party_name), vjust = 1, hjust = 1)
library(ggrepel)
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_text_repel(aes(label = party_name), vjust = 1, hjust = 1)
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_text_repel(aes(label = party_name))
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_text_repel(aes(label = party_name)) +
labs(x = "Left-right", y = "EU")
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(alpha = 0.8) +
geom_smooth() +
labs(x = "Left-right", y = "EU")
library(ggrepel)
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_text_repel(aes(label = party_name)) +
labs(x = "Left-right", y = "EU")
ggplot(dta, aes(x = lrgen)) +
geom_histogram(colour = "black")
ggsave("plots/mt04_plot01.pdf", width = 5, height = 5)
ggsave("plots/mt04_plot01.pdf", width = 5, height = 3)
ggplot(dta, aes(x = lrgen)) +
geom_histogram(colour = "black", fill = "grey50∂")
ggplot(dta, aes(x = lrgen)) +
geom_histogram(colour = "black", fill = "grey50")
ggsave("plots/mt04_plot01.pdf", width = 5, height = 3)
ggsave("plots/mt04_plot02.pdf", width = 5, height = 3)
ggsave("plots/mt04_plot03.pdf", width = 5, height = 3)
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(alpha = 0.8) +
geom_smooth() +
labs(x = "Left-right", y = "EU")
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(alpha = 0.8) +
labs(x = "Left-right", y = "EU")
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(alpha = 0.8) +
geom_smooth() +
labs(x = "Left-right", y = "EU")
ggsave("plots/mt04_plot03b.pdf", width = 5, height = 3)
library(ggrepel)
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_text_repel(aes(label = party_name)) +
labs(x = "Left-right", y = "EU")
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_text_repel(aes(label = party_name)) +
labs(x = "Left-right", y = "EU")
ggsave("plots/mt04_plot04.pdf", width = 5, height = 3)
ggplot(dta, aes(x = lrgen)) +
geom_histogram(colour = "black", fill = "grey50")
ggsave("plots/mt04_plot01.pdf", width = 5, height = 3)
ggplot(dta, aes(x = lrgen)) +
geom_histogram(colour = "black", fill = "grey50")
ggsave("plots/mt04_plot01.pdf", width = 5, height = 3)
ggplot(dta, aes(x = lrgen)) +
geom_density(colour = "black")
ggsave("plots/mt04_plot02.pdf", width = 5, height = 3)
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(alpha = 0.8) +
labs(x = "Left-right", y = "EU")
ggsave("plots/mt04_plot03a.pdf", width = 5, height = 3)
ggplot(dta, aes(x = lrgen, y = eu_position)) +
geom_point(alpha = 0.8) +
geom_smooth() +
labs(x = "Left-right", y = "EU")
ggsave("plots/mt04_plot03b.pdf", width = 5, height = 3)
library(ggrepel)
dta %>% filter(cname == "ire") %>%
ggplot(aes(x = lrgen, y = eu_position)) +
geom_point() +
geom_text_repel(aes(label = party_name)) +
labs(x = "Left-right", y = "EU")
ggsave("plots/mt04_plot04.pdf", width = 5, height = 3)
df <- readRDS(file = "data/dta_merged.RDS")
df$statement <- ""
df$statement[grepl("Dieselfahrzeuge", df$these)] <- "Dieselverbote"
df$statement[grepl("wie viele Flüchtlinge", df$these)] <- "Flüchtlingsgrenze"
df$statement[grepl("Massentier", df$these)] <- "Tierhaltung"
df$statement[grepl("Altersarmut", df$these)] <- "Rentenerhöhungen"
df$statement[grepl("Mietpreisbremse", df$these)] <- "Mietpreisbremse"
df$statement[grepl("Lobbyre", df$these)] <- "Lobbyregister"
df <- readRDS(file = "data/dta_merged.RDS")
###############################################
###############################################
### Script to merge the wahlomat data with election results and additional information
###############################################
###############################################
library(tidyverse)
library(car)
# Read in wahlomat data
dta_candidates <- readRDS("raw_data/kandidatencheck_complete.RDS") %>%
mutate(nr = as.numeric(wk_nummer)) %>% filter(!is.na(nr))
# Read in additional information (s = structural data; df = election results)
#load("/Users/stefan/Dropbox/wahlomat2017/raw_data/tidy_kerg/tidy_kerg.RData")
s <- read.csv("raw_data/tidy_kerg/tidy_strukturdaten.csv", dec = ",",
stringsAsFactors = FALSE)
df <- read.csv("raw_data/tidy_kerg/tidy_kerg.csv", dec = ",",
stringsAsFactors = FALSE)
## Variable information
# nr -- number of electoral district, NA for states and "Bundesgebiet"
# gebiet -- name of the area (electoral district, state or "Bundesgebiet")
# gehoertzu -- numerical identifier for states, NA for "Bundesgebiet"
# land -- name of state, NA for "Bundesgebiet"
# party -- name of party
# partygroup -- abbreviations for major parties, CDU and CDU named CDU/CSU, all other parties named "Sonstige"
# vote -- "Erststimme" or "Zweitstimme"
# period -- 2017 or 2013
# votes -- number of votes cast for that party
# voteshare -- voteshare for party
# voters -- total number of voters in geographic entity
# turnout -- turnout in geographic entity
# eligible -- number of eligible citizens in geographic entity
# invalid -- number of invalid votes in geographic entity
# Merge additional information by "nr" (number of electoral district)
dta_additional <- dplyr::left_join(df, s, by = c("nr"))
dta_additional$party <- rvest::repair_encoding(dta_additional$party)
# Create new variable with short party name for merging
## Add other party names too
dta_additional <- dta_additional %>%
mutate(partei = car::recode(party, "'Sozialdemokratische Partei Deutschlands'='SPD';
'Sozialistische Gleichheitspartei, Vierte Internationale'='Sozialistische Gleichheitspartei';
'Allianz für Menschenrechte, Tier- und Naturschutz'='Tierschutzallianz';
'Piratenpartei Deutschland'='PIRATEN';
'Neue Liberale – Die Sozialliberalen'='Neue Liberale';
'Christlich Demokratische Union Deutschlands'='CDU';
'Christlich-Soziale Union in Bayern e.V.'='CSU';
'Alternative für Deutschland'='AfD';
'BÜNDNIS 90/DIE GRÜNEN'='DIE GRÜNEN';
'Freie Demokratische Partei'='FDP';
'Bayernpartei'='BAYERNPARTEI';
'bergpartei, die überpartei'='Bergpartei';
'Bündnis C - Christen für Deutschland'='Bündnis C';
'Bürgerrechtsbewegung Solidarität'='BüSo';
'Feministische Partei DIE FRAUEN'='DIE FRAUEN';
'Partei für Arbeit, Rechtsstaat, Tierschutz, Elitenförderung und basisdemokratische Initiative'='Die PARTEI';
'Die Violetten'='DIE VIOLETTEN';
'Deutsche Kommunistische Partei'='DKP';
'Familien-Partei Deutschlands'='FAMILIEN-PARTEI';
'Menschliche Welt'='MENSCHLICHE WELT';
'Marxistisch-Leninistische Partei Deutschlands'='MLPD';
'Nationaldemokratische Partei Deutschlands'='NPD';
'Ökologisch-Demokratische Partei'='ÖDP';
'UBHÄNGIGE für bürgernahe Demokratie'='UNABHÄNGIGE';
'V-Partei³ - Partei für Veränderung, Vegetarier und Veganer'='V-Partei³'")) %>%
filter(vote == "Erststimme" & period == "2017"& !is.na(nr) ) %>%  # filter only Erststimme and 2017 election
mutate(nr = as.numeric(nr))
# Merge candidate data with election results
View(dta_additional)
dta_merged <- dplyr::left_join(dta_additional, dta_candidates, by = c("nr", "partei"))
# Filter candidates who are not merged with meta data
dta_errors <- dta_merged %>%
filter(is.na(votes))
dta_errors_summarise <- dta_errors %>%
group_by(partei) %>%
summarise(n = n())
# Save files
saveRDS(dta_merged, file = "data/dta_merged.RDS")
library(tidyverse)
library(car)
dta_candidates <- readRDS("raw_data/kandidatencheck_complete.RDS") %>%
mutate(nr = as.numeric(wk_nummer)) %>% filter(!is.na(nr))
s <- read.csv("raw_data/tidy_kerg/tidy_strukturdaten.csv", dec = ",",
stringsAsFactors = FALSE)
df <- read.csv("raw_data/tidy_kerg/tidy_kerg.csv", dec = ",",
stringsAsFactors = FALSE)
library(tidyverse)
library(haven)
dta <- read_sav("/Users/stefan/GitHub/po3600/data/mt_05/ines.sav")
View(dta)
ggplot(dta, aes(x = v0900))
dta <- read_sav("/Users/stefan/GitHub/po3600/data/mt_05/ines.sav") %>%
mutate(gender = car::recode(v0900, "1='Male'; 2='Female';else:NA"))
dta <- read_sav("/Users/stefan/GitHub/po3600/data/mt_05/ines.sav") %>%
mutate(gender = car::recode(v0900, "1='Male'; 2='Female'; else = NA"))
dta <- read_sav("/Users/stefan/GitHub/po3600/data/mt_05/ines.sav") %>%
mutate(gender = car::recode(v0900, "1='Male'; 2='Female'"))
dta <- read_sav("/Users/stefan/GitHub/po3600/data/mt_05/ines.sav") %>%
mutate(gender = car::recode(v0900, "'1'='Male'; '2'='Female'"))
dta <- read_sav("/Users/stefan/GitHub/po3600/data/mt_05/ines.sav") %>%
mutate(gender = car::recode(v0900, "'1'='Male'; '2'='Female'"))
dta <- read_sav("/Users/stefan/GitHub/po3600/data/mt_05/ines.sav")
dta$v0900
dta <- dta %>%
mutate(gender = car::recode(v0900, "'1'='Male'; '2'='Female'"))
